# プロジェクトガイドライン

## 前提
- ユーザーは Cline よりプログラミングが得意です
- 時短のために Cline にコーディングを依頼しています
- 2回以上連続でテストを失敗した時は、一度作業を止めてください
- 現在の状況を整理して報告せよ。そして解決するための指示を待ってください
- コンテキストが不明瞭な時は、ユーザーに確認してください

## 作業方法

### 作業開始前
作業を開始する前に、以下を確認してください

- `git status` で現在のコンテキストを確認する。もし指示された内容と無関係な変更が多い場合はユーザーに別のタスクとして開始するように提案する

無視するように言われた場合は、そのまま続行する

### 作業実行中
プログラムを実装をしたら、以下を確認してください

- `npm test` を実行し、テストが成功すること。失敗したら修正すること
- `npm run format` を実行し、フォーマットを整えること

### 作業完了後
作業が完了したら、以下を確認してください

- ユーザーに変更内容を git commit するか確認する
- ユーザーに変更内容を git push するか確認する

## ドキュメンテーション

### ドキュメントの場所
- 機能を変更する際は /docs の関連ドキュメントを更新する
- README.md を新機能と同期させる

### ドキュメントの文体
- です。ます調を使用してください
- 文末の「。」は不要です。このドキュメントの文体を参考にしてください
- 極力簡潔な表現を心がけてください

### コードコメント
- コードコメントに対しての説明はおこなわないです
- JS Docs でのアノテーションは不要です
- 関数やクラスの説明はおこなわないでください。関数名が説明になるようにしてください

## 開発環境
- 開発言語は TypeScript を基本として使用します
- Node.js と npm のバージョン管理には volta を使用します
- Node.js は最新の LTS バージョンを使用します

## コードスタイルとパターン
- 純粋関数を優先。状態を保つ必要がある場合のみクラスを利用する
- 継承よりもコンポジションを優先する

## テスト
- 純粋関数の単体テストを優先
- インメモリ実装によるリポジトリテスト
- テスト可能性を設計に組み込む

## Git の操作

### git add
- 特になし

### git commit
- `git commit` のコマンドを実行するときは、`-m` オプションでメッセージを必ず設定してください
- メッセージのルールは、以下に従ってください
- コミットメッセージは Conventional Commits の形式に従います
- コミットタイプは以下を使用します：
  - feat: 新機能の追加
  - fix: バグ修正
  - docs: ドキュメントの更新
  - style: コードスタイルの修正（空白、フォーマット等）
  - refactor: リファクタリング
  - test: テストの追加・修正
  - chore: ビルドプロセスやツールの変更
- スコープの指定は任意ですが、影響範囲が明確な場合は記載します
- コミットメッセージは英語で記述します
- 本文は変更内容を明確に説明します

### git diff
- `git diff` を使うときは `--no-pager` オプションを使い、メッセージが省略されないようにしてください
- つまり `git --no-pager diff` としてください
